#!/usr/bin/sh
# This script copies my config files to my home directory. Since I use the same
# dotfiles repository across different machines, I sometimes need to store a
# separate config for each device. The script also manages to copy the plugins
# stored here as git submodles as normal git repositories into their proper
# locations.
#
# The devices are separated by their suffix (box & top)
# USAGE: <SCRIPT> [-dnh]
# DEPENDENCIES: 'util-linux', 'coreutils', 'find-utils', 'sed'

# Set the name of the script
SCRIPT="${0##*/}"

OPTS=$(getopt --options d:n:h \
	--longoptions dot-dir:,hostname:,help \
	--name "$SCRIPT" -- "$@")

[ $? -ne 0 ] \
	&& exit 1;

eval set -- "$OPTS" && unset OPTS
while true; do
	case "$1" in
		-d | --dot-dir) DOTDIR="$2"; shift 2 ;;

		-n | --hostname) HOSTNAME="$2"; shift 2 ;;

		-h | --help)
			printf '%s accepts the following options:\n' "$SCRIPT"
			printf '\t-h, --help\tprints this help message\n'
			printf '\t-d, --dot-dir\tsepcify the location of the dot directory\n'
			printf '\t-n, --hostname\tspecify the hostname of the device\n'
			printf 'The default location is specified using the enviroment variable: $DOTDIR\n'
			exit
			;;

		-- ) shift; break ;;
		* ) break ;;
	esac
done

[ -z "$DOTDIR" ] && \
	{ echo "DOTDIR in not defined"; exit 1; }

[ -z "${HOSTNAME:="$(uname -n 2> /dev/null)"}" ] && \
	{ echo "Hostname can't be established"; exit 1; }

copy_files_to_home() {
	local base_dir="$1"
	local prune_dir="$2"

	# Find all git submodules, and format them as prune commands for `find`
	local git_submodules="$(find $DOTDIR -type f -name '.git' -printf '-path "%h" -prune -o ')"
	git_submodules="${git_submodules% -o }" # Remove the last -o flag

	# Ignore files in $prune_dir and $git_submodules,
	local find_command="find \"$DOTDIR\" \( -path \"$DOTDIR/*$prune_dir\" -prune -o $git_submodules \) -false -o -type f"
	local files="$(eval "$find_command")" # allows for malicious code, but keeps the script clean. ¯\_(ツ)_/¯
	for file in $files; do
		dir=$(echo "${file##$DOTDIR}" | sed "s|/$base_dir/|/|g")
		dir="$HOME${dir%/*}"
		[ ! -d "$dir" ] && mkdir -pv "$dir"

		cp -vuf "$file" "$dir"
	done

 	# Clean up from `find` args
	git_submodules="$(echo "${git_submodules%\" -prune}" | sed -e 's/" -prune -o -path "/\n/g' -e 's/^-path "//')"
	for module in $git_submodules; do
		copy_git_submodule "$module"
	done
}

copy_git_submodule() {
	local module_dir="$1"

	# Copy all module files execpt the .git file
	local module_files="$(find "$module_dir" -type f \( ! -iname '.git' \))"
	for file in $module_files; do
		dir="${file##$DOTDIR}"
		dir="$HOME${dir%/*}"
		[ ! -d "$dir" ] && mkdir -pv "$dir"

		cp -vuf "$file" "$dir"
	done

	# Copy .git meta data from git submodule
	local actual_gitdir="$(realpath "$module_dir/$(cat "$module_dir/.git" | cut -d ' ' -f2)/")"
	local dest_gitdir="$HOME/${module_dir##$DOTDIR/}/.git"
	[ ! -d "$dest_gitdir" ] && mkdir -pv "$dest_gitdir"
	cp -vufRfT "$actual_gitdir" "$dest_gitdir"
	sed -i -E '/worktree.*/d' "$dest_gitdir/config"
}

if [ -z "${HOSTNAME##*box}" ]; then
	copy_files_to_home box top
elif [ -z "${HOSTNAME##*top}" ]; then
	copy_files_to_home top box
else
	echo "$HOSTNAME: Invalid hostname" && exit 1
fi
